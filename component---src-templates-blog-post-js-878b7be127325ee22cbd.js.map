{"version":3,"file":"component---src-templates-blog-post-js-878b7be127325ee22cbd.js","mappings":"4NA2DA,EAhDY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAIvC,OAFAC,EAAAA,EAAAA,KAGE,uBAAKC,UAAU,QACb,gBAAC,EAAAC,EAAD,CACED,UAAU,eACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,yBACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCb,aAAA,EAAAA,EAAQc,OACP,uCACa,8BAASd,EAAOc,MAD7B,KAC6Cd,aAAA,EAAAA,EAAQe,UAAW,KADhE,IAGE,qBAAGC,KAAI,yBAAyBb,aAAA,EAAAA,EAAQc,UAAR,KAAhC,sCAOT,E,mBC9CD,EATwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,uBACEb,UAAU,oBACVc,wBAAyB,CAAEC,OAAQF,IAGxC,ECqDYG,EAAO,SAAC,GAAwC,IAAdC,EAAa,EAArCxB,KAAQyB,eAC7B,OACE,gBAAC,IAAD,CACEC,MAAOF,EAAKG,YAAYD,MACxBE,YAAaJ,EAAKG,YAAYC,aAAeJ,EAAKK,SAGvD,EAED,EA9DyB,SAAC,GAGnB,IAAD,MAFJ7B,KAAQ8B,EAEJ,EAFIA,SAAUC,EAEd,EAFcA,KAAM5B,EAEpB,EAFoBA,KAAsBqB,EAE1C,EAF0BC,eAC9BO,EACI,EADJA,SAEMC,GAAY,UAAA9B,EAAKC,oBAAL,eAAmBsB,QAAnB,QACZQ,GAAY5B,EAAAA,EAAAA,GAASkB,EAAKG,YAAYO,WAE5C,OACE,gBAAC,IAAD,CAAQF,SAAUA,EAAUN,MAAOO,GACjC,2BAAS1B,UAAU,sCACjB,8BACE,gBAAC,EAAA4B,EAAD,CAAaC,MAAOF,EAAW3B,UAAU,SACzC,0BAAKiB,EAAKG,YAAYD,OACtB,yBAAIF,EAAKG,YAAYU,OAGvB,2BAAShB,wBAAyB,CAAEC,OAAQE,EAAKc,QACjD,2BACA,8BACE,gBAAC,EAAD,QAGJ,gBAAC,EAAD,CAAiBlB,SAAUI,EAAKe,kBAChC,2BACE,sBACEC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGf,GACC,gBAAC,EAAAgB,KAAD,CAAMC,GAAIjB,EAASkB,OAAOC,KAAMC,IAAI,QAApC,KACKpB,EAASH,YAAYD,QAI9B,0BACGK,GACC,gBAAC,EAAAe,KAAD,CAAMC,GAAIhB,EAAKiB,OAAOC,KAAMC,IAAI,QAC7BnB,EAAKJ,YAAYD,MADpB,SASb,C","sources":["webpack://curlyjun-blog/./src/components/bio.js","webpack://curlyjun-blog/./src/components/TableOfContents.jsx","webpack://curlyjun-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage, GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  getImage()\n\n  return (\n    <div className=\"flex\">\n      <StaticImage\n        className=\"rounded-full\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile.jpeg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\n\nconst TableOfContents = ({ contents }) => {\n  return (\n    <div\n      className=\"table-of-contents\"\n      dangerouslySetInnerHTML={{ __html: contents }}\n    />\n  )\n}\n\nexport default TableOfContents\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport TableOfContents from \"../components/TableOfContents\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n  const thumbnail = getImage(post.frontmatter.thumbnail)\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article className=\"prose max-w-none dark:prose-invert\">\n        <header>\n          <GatsbyImage image={thumbnail} className=\"mb-4\" />\n          <h1>{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <TableOfContents contents={post.tableOfContents} />\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        date(formatString: \"M월 D일, YYYY\")\n        title\n        description\n        thumbnail {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH)\n          }\n        }\n      }\n      tableOfContents\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","getImage","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","contents","dangerouslySetInnerHTML","__html","Head","post","markdownRemark","title","frontmatter","description","excerpt","previous","next","location","siteTitle","thumbnail","G","image","date","html","tableOfContents","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}